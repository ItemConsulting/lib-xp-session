plugins {
    id 'java'
    id 'maven-publish'
    id 'com.github.node-gradle.node' version '3.0.1'
    id 'com.enonic.xp.base' version '2.0.0'
}

dependencies {
    compile "com.enonic.xp:portal-api:${xpVersion}"
}

repositories {
    mavenLocal()
    jcenter()
    xp.enonicRepo()
}

node {
    download = true
    version = '16.1.0'
}

task npmInstallForce( type: NpmTask ) {
    description = 'Update all project node dependencies'
    args = ['install', '--force']
}

task cleanNode( type: org.gradle.api.tasks.Delete ) {
    delete 'node_modules'
}

task serverWebpack( type: NodeTask, dependsOn: npmInstall ) {
    environment = [ 'NODE_ENV': nodeEnvironment() ]
    // args = [ '--config', 'webpack.server.config.babel.js', '--color', '--hide-modules' ]
    args = [ '--config', 'webpack.server.config.js', '--color' ]
    description = 'Build server JS.'
    inputs.dir 'src/main'
    outputs.dir "${buildDir}/resources/main"
    script = file( 'node_modules/webpack-cli/bin/cli.js' )
}

processResources {
    include '**/*'
    exclude '**/.gitkeep'
    exclude '**/tsconfig.*.json'
    exclude '**/*.es'
    exclude '**/*.es6'
    exclude '**/*.ts'
    exclude 'assets/js/**/*.js'
    include 'assets/js/bundle.js'
    includeEmptyDirs false
}

jar {
    exclude 'assets/styles/**/*.js'

    dependsOn += serverWebpack
}

jar.outputs.dir "${buildDir}/resources/main"

def nodeEnvironment() {
    def environments = [ prod : 'production', dev: 'development' ]
    def nodeEnv = environments[hasProperty( 'env' ) ? env : 'prod']
    return nodeEnv != null ? nodeEnv : 'production'
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            groupId group
            artifactId projectName
            version version
        }
    }
}
